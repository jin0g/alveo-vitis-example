---
description: 
globs: 
alwaysApply: true
---
# コーディングルール

- このプロジェクトではAlveoとVitisフローを用いた複数のサンプルを記述します。
- 各サブディレクトリ以下に、Makefileを中心としたビルド環境を整えます。
- Makefileには必ずcleanを記述し、ゴミファイルがcleanコマンドですべて削除できるようにします。
- ソースコードはすべてサブディレクトリ直下に置き、サブディレクトリ以下に追加のディレクトリは不要です。
- 例えばsrcやbuildディレクトリも不要であり、すべての成果物はサブディレクトリに生成します。
- 各サブディレクトリの構成は典型的には以下の通りです。
  - Makefile
  - README.md
  - $(kernel).cpp (HLSカーネル、カーネルが複数ある場合はそれぞれの関数名毎に単一のファイルに関数を1つだけ記述)
  - $(kernel)_test_hw.cpp (C++のFPGA実機テストベンチ)
  - $(kernel)_test_sw.cpp (C++のソフトウェアテストベンチ)
  - $(kernel)_module_hw.cpp (Pybind11用のFPGA実機モジュールコード)
  - $(kernel)_module_sw.cpp (Pybind11用のソフトウェアモジュールコード)
  - $(kernel)_python_test_hw.py (Python+numpyの実機テストベンチ)
  - $(kernel)_python_test_sw.py (Python+numpyのソフトウェアベンチ)
- 特別に必要な場合を除いてヘッダーの作成は不要です。
- すべてのビルドコマンドと実行コマンドはMakefileを通して実行すること。
- 使用しないincludeはすべて削除して下さい。
- ビルドコマンドでも、不要な最適化コマンドや警告-Wallなどは必要ありません。
- デバッグ用の情報も不要です。
- Pythonの仮想環境は作成しないでください。(すでに用意されています。)
- パスが通っていない場合は一度.bashrcを確認して、必要に応じてsource ~/.bachrcを実行して下さい。
- この環境ではv++コマンドとXRTを使用します。
- 直接Vitis/Vivadoを使用することはできません。

## README.mdの中身
- 各サブディレクトリにはREADME.mdを必ず記述し、HLSカーネル、ビルド、実行手順について簡潔に記述します。
- できるだけ簡潔に自然言語で説明し、親切なコメントなどは不要です。
- 端的に機能と説明だけを記述して下さい。

## HLSコードの規則
- extern "C"を関数に付ける。
- 関数名は単に$(kernel)とする。
- 例えば extern "C" int add(int a, int b);など。
- 配列はaxisかm_axi、スカラ値はs_axiliteを使用する。
- INTERFACEではbundleは指定しない。
- できるだけシンプルなコード記述を目指す。

## Makefileのルール
- cleanでは.xclbinと.xo以外のファイルをクリーンします。
- clean-allでは.xoと.xclbinを含めたすべての成果物をクリーンします。
- AIエージェントによる直接rmコマンドを使った削除や手動でのファイル削除は禁止します。
- 原則として、Makefile内で安易に新しい変数を定義しないこと。
- `TOP` (カーネル名やプロジェクト名を指す変数) 以外の変数は、基本的に直接記述 (ベタ書き) とする。
- ただし、複数の箇所 (目安として3箇所以上) で共通して利用されるフラグやパスについては、可読性とメンテナンス性向上のため、変数として定義することを許可する。
- その場合も、変数のスコープは最小限に留め、Makefile全体でグローバルに参照できる必要がない変数は、局所的に定義する。


